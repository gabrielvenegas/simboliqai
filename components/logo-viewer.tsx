import { useEffect, useRef } from "react";

type LogoViewerProps = {
  svg: {
    icon: string;
    text: string;
  };
};

// const svgList = {
//   icon:
//     "\n" +
//     '         <g id="icon">\n' +
//     "           \n" +
//     '<path transform="translate(0,0)" fill="rgb(23,26,32)" d="M 1823.17 270.582 L 1824.47 271.825 C 1829.4 293.878 1830.48 317.915 1832.99 340.438 L 1847.57 478.362 C 1852.83 529.117 1864.52 587.132 1862.94 637.527 C 1860.45 716.882 1812.34 793.154 1744.92 833.563 C 1718.06 849.662 1686.65 858.988 1657.19 869.206 L 1524 915.154 C 1498.7 923.868 1472.44 931.476 1448.07 942.559 C 1475.62 1039.16 1518.53 1152.77 1552.59 1248.18 C 1531.78 1266.8 1507.63 1283.09 1485.45 1300.16 C 1458.78 1261.73 1434.1 1220.08 1405.44 1183.32 C 1386.84 1196.6 1369.5 1211.9 1351.15 1225.6 C 1344.18 1242.18 1338.99 1259.68 1333.08 1276.66 L 1217.68 1604.67 C 1210.68 1624.94 1177.65 1724.12 1169.7 1734.82 C 1155.92 1753.36 1129.97 1749.21 1109.99 1749.14 L 957.403 1749.08 C 876.917 1749.25 883.134 1749.3 857.89 1678.43 L 763.562 1417.19 C 755.49 1394.71 746.622 1372.49 738.893 1349.89 L 711.257 1268.78 C 691.78 1213.37 690.153 1221.95 642.536 1183.32 C 618.05 1221.41 588.612 1257.77 561.063 1293.68 C 537.952 1279.07 515.268 1263.46 492.59 1248.18 C 502.542 1216.93 515.441 1186.19 526.533 1155.28 C 551.179 1086.74 581.526 1010.95 602.352 942.559 L 402.65 873.157 C 373.174 862.678 340.699 854.074 313.251 839.036 C 245.874 802.122 195.334 734.129 185.164 657.221 C 179.017 610.731 191.286 551.953 196.404 504.58 L 211.849 369.044 C 215.481 336.22 218.391 303.344 222.596 270.582 C 234.915 288.761 244.731 308.768 255.582 327.852 L 423.578 624.17 C 437.308 629.95 451.869 633.709 466.092 638.054 L 523.015 655.665 C 557.788 666.353 632.396 699.851 665.33 687.168 C 695.213 675.66 724.192 661.663 753.837 649.538 L 1024.08 537.802 C 1054.53 550.888 1085.61 562.376 1116.15 575.209 L 1295.52 649.007 C 1332.16 664.024 1368.49 679.568 1405.44 693.832 C 1474.68 668.52 1554.17 647.525 1625.66 624.17 C 1640.14 602.432 1655.15 570.895 1668.27 547.145 L 1764.6 374.224 C 1783.7 339.735 1801.19 303.312 1823.17 270.582 z M 1024.08 616.982 C 999.995 628.401 974.888 637.675 950.442 648.312 L 836.756 696.789 C 787.559 717.881 734.663 738.033 686.997 760.5 L 686.997 906.267 C 745.227 949.704 800.269 997.945 856.9 1043.45 L 937.962 1108.67 C 952.551 1120.6 970.165 1133.3 982.16 1147.84 C 983.964 1159.16 982.371 1171.5 982.248 1182.98 L 982.116 1528.01 C 982.024 1541.21 981.184 1554.36 982.16 1567.54 C 960.841 1586.31 943.081 1609.4 921.706 1628.5 C 927.596 1644.38 933.027 1660.73 939.71 1676.28 L 1027.25 1676.28 L 1109.41 1676.28 C 1114 1660.3 1119.88 1644 1125.94 1628.5 C 1107.26 1607.32 1085.27 1588.98 1066.92 1567.54 L 1066.91 1200.55 C 1066.91 1185.19 1062.11 1149.6 1073.65 1138 C 1103.73 1107.75 1145.11 1078.51 1178.47 1051.42 L 1282.75 968.315 C 1308.93 947.407 1334.86 925.317 1362.43 906.267 L 1362.43 757.226 C 1285.29 727.187 1209.37 693.999 1132.84 662.45 L 1071.66 637.814 C 1056 631.618 1038.48 625.721 1024.08 616.982 z M 667.124 984.516 C 652.954 1022.81 636.727 1061.71 625.983 1101.09 C 634.691 1099.09 643.48 1097.27 651.976 1094.47 C 673.521 1111.67 694.406 1129.67 715.762 1147.09 C 772.288 1193.22 754.214 1171.92 780.618 1242.78 C 816.441 1338.92 848.881 1436.31 883.913 1532.73 C 886.528 1539.97 888.976 1547.34 892.305 1554.28 C 896.542 1548.78 901.338 1544.31 906.485 1539.67 L 906.485 1177.06 C 825.96 1113.9 748.416 1046.6 667.124 984.516 z M 1384.32 980.606 C 1305.36 1044.79 1223.55 1110.94 1143 1173.19 L 1142.97 1498.71 C 1142.95 1512.3 1142.37 1526.11 1143 1539.67 C 1147.06 1544.55 1151.01 1549.59 1155.27 1554.28 C 1159.79 1543.36 1163.25 1531.94 1167 1520.74 C 1180.78 1483.35 1277.48 1195.94 1284.79 1186.98 C 1304.53 1162.81 1369.71 1120.67 1397.77 1094.47 C 1407.29 1099.47 1416.99 1105.34 1426.9 1109.42 C 1413.57 1066.36 1398.96 1023.25 1384.32 980.606 z M 268.522 504.582 C 257.32 575.886 248.47 665.297 291.781 724.983 C 327.034 773.564 376.682 783.844 430.034 802.787 L 545.543 843.238 C 565.895 850.318 586.13 858.163 606.776 864.323 C 618.869 867.384 613.236 840.546 613.233 828.69 L 613.202 760.5 C 590.388 757.441 566.828 746.97 544.847 739.937 L 428.017 703.268 C 411.299 697.933 388.935 693.771 373.568 686.319 C 356.804 662.228 279.203 511.921 268.522 504.582 z M 1775.46 504.582 C 1747.44 559.4 1715.03 630.553 1682.3 681.964 C 1616.34 710.766 1505.15 741.633 1435.6 760.5 L 1435.53 829.444 C 1435.51 840.985 1434.89 852.822 1435.6 864.323 C 1438.32 864.269 1441.65 863.864 1444.29 864.323 C 1468.67 853.547 1494.21 846.396 1519.35 837.68 L 1635.05 796.68 C 1724.35 765.38 1795.46 728.113 1787.45 613.085 C 1786.63 601.322 1777.4 509.226 1775.46 504.582 z"/>\n' +
//     '<path transform="translate(0,0)" fill="rgb(3,173,208)" d="M 1161.78 773.717 C 1177.52 785.772 1200.93 812.05 1213.64 826.913 C 1197.11 845.844 1176.69 864.309 1159.06 882.55 L 1064.23 981.141 C 1040.49 1005.64 1016.23 1029.67 993.273 1054.92 C 963.108 1026.64 937.063 993.741 906.485 965.844 C 890.808 946.614 872.407 929.244 855.663 910.895 C 872.562 893.906 893.173 876.539 906.485 856.617 C 935.383 880.14 963.964 919.254 993.273 946.361 C 1048.12 888.039 1103.35 828.359 1161.78 773.717 z"/>\n' +
//     "\n" +
//     "         </g>\n" +
//     "         ",
//   text:
//     "\n" +
//     "          <text\n" +
//     `                style="font-family: 'Domine', sans-serif; font-size: 48.5px; fill: black;">\n` +
//     "            bullhunter\n" +
//     "          </text>\n" +
//     "         ",
// };

export default function LogoViewer({ svg: svgString }: LogoViewerProps) {
  const svgContainer = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const container = svgContainer.current;
    if (!container) return;

    // Build SVG wrapper with a proper viewBox to avoid cropping
    const svgContent = `
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="400"
          height="100"
          viewBox="0 0 400 100"
          preserveAspectRatio="xMinYMid meet"
        >
        <g>
          ${svgString.icon}
          ${svgString.text}
        </svg>
      `;

    container.innerHTML = svgContent;

    const svg = container.querySelector("svg");
    const iconGroup = svg?.querySelector("#icon") as SVGGElement;
    const textElem = svg?.querySelector("text");

    if (!svg || !iconGroup || !textElem) return;

    const iconBox = iconGroup.getBBox();
    const textBox = textElem.getBBox();

    const desiredIconHeight = 50;
    const scaleFactor = desiredIconHeight / iconBox.height;

    const scaledIconHeight = iconBox.height * scaleFactor;
    const iconCenterY = iconBox.y * scaleFactor + scaledIconHeight / 2;
    const textCenterY = textBox.y + textBox.height / 2;

    iconGroup.setAttribute(
      "transform",
      `translate(0, 0) scale(${scaleFactor})`,
    );

    const iconWidthScaled = iconBox.width * scaleFactor;
    textElem.setAttribute("x", String(iconWidthScaled + 20));
    textElem.setAttribute("y", String(scaledIconHeight));

    // Optionally, adjust the font size to match the scaled icon height.
    textElem.style.fontSize = `${scaledIconHeight - 6}px`;
  }, [svgString]);

  return (
    <div>
      <div ref={svgContainer}></div>
      {/* <button onClick={downloadSvg}>Download SVG</button> */}
    </div>
  );
}
